// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.235
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Hospital.Domain.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Track patients")]
    public partial class TrackPatientsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TrackPatient.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Track patients", "In order to avoid silly mistakes\r\nAs a nurse\r\nI want to track patients", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Create a patient")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void CreateAPatient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create a patient", new string[] {
                        "domain"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table1.AddRow(new string[] {
                        "First Name",
                        "Red"});
            table1.AddRow(new string[] {
                        "Last Name",
                        "Shirt"});
#line 8
 testRunner.When("I create a patient", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table2.AddRow(new string[] {
                        "First Name",
                        "Red"});
            table2.AddRow(new string[] {
                        "Last Name",
                        "Shirt"});
#line 12
 testRunner.Then("the patient is created", ((string)(null)), table2);
#line 16
 testRunner.And("nothing else happens");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Admit a patient")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void AdmitAPatient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Admit a patient", new string[] {
                        "domain"});
#line 19
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table3.AddRow(new string[] {
                        "First Name",
                        "Red"});
            table3.AddRow(new string[] {
                        "Last Name",
                        "Shirt"});
#line 20
 testRunner.Given("I have created a patient", ((string)(null)), table3);
#line 24
 testRunner.When("I admit the patient");
#line 25
 testRunner.Then("the patient is admitted");
#line 26
 testRunner.And("nothing else happens");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Admit an admitted patient")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void AdmitAnAdmittedPatient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Admit an admitted patient", new string[] {
                        "domain"});
#line 29
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table4.AddRow(new string[] {
                        "First Name",
                        "Red"});
            table4.AddRow(new string[] {
                        "Last Name",
                        "Shirt"});
#line 30
 testRunner.Given("I have created a patient", ((string)(null)), table4);
#line 34
 testRunner.And("I have admitted the patient");
#line 35
 testRunner.When("I admit the patient");
#line 36
 testRunner.Then("nothing happens");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Assign a patient to a bed")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void AssignAPatientToABed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign a patient to a bed", new string[] {
                        "domain"});
#line 39
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table5.AddRow(new string[] {
                        "First Name",
                        "Red"});
            table5.AddRow(new string[] {
                        "Last Name",
                        "Shirt"});
#line 40
 testRunner.Given("I have created a patient", ((string)(null)), table5);
#line 44
 testRunner.And("I have admitted the patient");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table6.AddRow(new string[] {
                        "Bed",
                        "2"});
#line 45
 testRunner.When("I assign the patient to a bed", ((string)(null)), table6);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table7.AddRow(new string[] {
                        "Bed",
                        "2"});
#line 48
 testRunner.Then("the patient is assigned to a bed", ((string)(null)), table7);
#line 51
 testRunner.And("nothing else happens");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Move a patient to another bed")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void MoveAPatientToAnotherBed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Move a patient to another bed", new string[] {
                        "domain"});
#line 54
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table8.AddRow(new string[] {
                        "First Name",
                        "Red"});
            table8.AddRow(new string[] {
                        "Last Name",
                        "Shirt"});
#line 55
 testRunner.Given("I have created a patient", ((string)(null)), table8);
#line 59
 testRunner.And("I have admitted the patient");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table9.AddRow(new string[] {
                        "Bed",
                        "2"});
#line 60
 testRunner.And("I have assigned the patient to a bed", ((string)(null)), table9);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table10.AddRow(new string[] {
                        "Bed",
                        "3"});
#line 63
 testRunner.When("I assign the patient to a bed", ((string)(null)), table10);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table11.AddRow(new string[] {
                        "From Bed",
                        "2"});
            table11.AddRow(new string[] {
                        "To Bed",
                        "3"});
#line 66
 testRunner.Then("the patient is moved", ((string)(null)), table11);
#line 70
 testRunner.And("nothing else happens");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Assign an unadmitted patient to a bed")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void AssignAnUnadmittedPatientToABed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Assign an unadmitted patient to a bed", new string[] {
                        "domain"});
#line 73
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table12.AddRow(new string[] {
                        "First Name",
                        "Red"});
            table12.AddRow(new string[] {
                        "Last Name",
                        "Shirt"});
#line 74
 testRunner.Given("I have created a patient", ((string)(null)), table12);
#line 78
 testRunner.And("I have admitted the patient");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table13.AddRow(new string[] {
                        "Bed",
                        "2"});
#line 79
 testRunner.When("I assign the patient to a bed", ((string)(null)), table13);
#line 82
 testRunner.Then("error: The patient can\'t be assigned to a bed until admitted");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Discharge a patient")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void DischargeAPatient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Discharge a patient", new string[] {
                        "domain"});
#line 85
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table14.AddRow(new string[] {
                        "First Name",
                        "Red"});
            table14.AddRow(new string[] {
                        "Last Name",
                        "Shirt"});
#line 86
 testRunner.Given("I have created a patient", ((string)(null)), table14);
#line 90
 testRunner.And("I have admitted the patient");
#line 91
 testRunner.When("I discharge the patient");
#line 92
 testRunner.Then("the patient is discharged");
#line 93
 testRunner.And("nothing else happens");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Discharge an unadmitted patient")]
        [NUnit.Framework.CategoryAttribute("domain")]
        public virtual void DischargeAnUnadmittedPatient()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Discharge an unadmitted patient", new string[] {
                        "domain"});
#line 96
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Field",
                        "Value"});
            table15.AddRow(new string[] {
                        "First Name",
                        "Red"});
            table15.AddRow(new string[] {
                        "Last Name",
                        "Shirt"});
#line 97
 testRunner.Given("I have created a patient", ((string)(null)), table15);
#line 101
 testRunner.When("I discharge the patient");
#line 102
 testRunner.Then("error: The patient can\'t be discharged without being admitted");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
